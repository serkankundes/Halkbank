# -*- coding: utf-8 -*-
"""Operasyon Prim Listesi.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ycQRLQJXJaxAtFJruZVYxYSeF5UaU3AM
"""

import pandas as pd
import numpy as np
from datetime import datetime
import math
period_start = pd.Timestamp('2024-01-01')
period_end = pd.Timestamp('2024-03-31')
working_duty = 45
oprs_grvkod = ["MAS", "MIS", "BHA", "OAS", "OYT", "OYN", "OBY"]

df = pd.read_excel("/content/Data.xlsx")

uydu = pd.read_excel("/content/Uydu.xlsx")

df['BAŞLANGIÇ TARİHİ'] = pd.to_datetime(df['BAŞLANGIÇ TARİHİ'], format='%Y-%m-%d', errors='coerce')
df['BİTİŞ TARİHİ'] = pd.to_datetime(df['BİTİŞ TARİHİ'], format='%Y-%m-%d', errors='coerce')
df['İŞE GİRİŞ TARİHİ'] = pd.to_datetime(df['İŞE GİRİŞ TARİHİ'], format='%Y-%m-%d', errors='coerce')
df['ÇIKIŞ TARİHİ'] = pd.to_datetime(df['ÇIKIŞ TARİHİ'], format='%Y-%m-%d', errors='coerce')

# "HATALI TARİH" sütunu oluşturma ve imkansız tarih uyarısı ekleme
df['HATALI TARİH'] = df.apply(lambda x: 'İmkansız tarih uyarısı' if x['BİTİŞ TARİHİ'] < x['BAŞLANGIÇ TARİHİ'] else '', axis=1)

# ÇIKIŞ TARİHİ'nde boş değerler için Dönem Bitiş Tarihi kullanma
df['ÇIKIŞ TARİHİ'].fillna(period_end, inplace=True)

# 180 GÜN DURUMU hesaplama
def hesapla_180_gun_durumu(row):
    # İŞE GİRİŞ TARİHİ ile ÇIKIŞ TARİHİ arasındaki gün farkı
    is_giris_cikis_fark = (row['ÇIKIŞ TARİHİ'] - row['İŞE GİRİŞ TARİHİ']).days + 1
    if is_giris_cikis_fark >= 180:
        return 'uygun'
    elif pd.notna(row['KADRO ÖNCESİ BAŞLAMA TARİHİ']):
        # KADRO ÖNCESİ BAŞLAMA TARİHİ ile ÇIKIŞ TARİHİ arasındaki gün farkı
        kadro_oncesi_cikis_fark = (row['ÇIKIŞ TARİHİ'] - row['KADRO ÖNCESİ BAŞLAMA TARİHİ']).days + 1
        if kadro_oncesi_cikis_fark >= 180:
            return 'kadro öncesi ile uygun'
    return 'uygun değil'

df['180 GÜN DURUMU'] = df.apply(hesapla_180_gun_durumu, axis=1)

# DÖNEM sütunu oluşturma
def hesapla_donem_durumu(row, period_start, period_end):
    # Sicil kaydının dönem başlangıç ve bitiş tarihleri arasında olup olmadığını kontrol etme
    if (row['BAŞLANGIÇ TARİHİ'] <= period_end) and (row['BİTİŞ TARİHİ'] >= period_start):
        return 'Dönem içi'
    else:
        return 'Dönem dışı'

df['DÖNEM'] = df.apply(hesapla_donem_durumu, axis=1, args=(period_start, period_end))

Data = df[
    (df['HATALI TARİH'] == '') &
    (df['180 GÜN DURUMU'].isin(['uygun', 'kadro öncesi ile uygun'])) &
    (~df['GRVKOD'].isin(['Z95', 'Z96', 'Z97', 'Z99'])) &
    (df['DÖNEM'] == 'Dönem içi')
]

# Sorgu için açmış olduğum sütunları sil
Data.drop(['HATALI TARİH', '180 GÜN DURUMU', 'DÖNEM'], axis=1, inplace=True)

"""Data Dataframe oluştu."""

# Filtreleme koşullarını uygulayarak yeni bir DataFrame oluşturalım
Asli_data = Data[(Data['DURUM']=='ASLİ GÖREV')]

Asli_data.loc[Asli_data['BAŞLANGIÇ TARİHİ'] < period_start , 'BAŞLANGIÇ TARİHİ'] = period_start
Asli_data.loc[Asli_data['BİTİŞ TARİHİ'] > period_end, 'BİTİŞ TARİHİ'] = period_end

#Veri tiplerini kontrol edip uygun şekilde dönüşüm yaparak "GÜN" sütunu oluşturalım
Asli_data['GÜN'] = (Asli_data['BİTİŞ TARİHİ'].astype('datetime64[ns]') - Asli_data['BAŞLANGIÇ TARİHİ'].astype('datetime64[ns]')).dt.days + 1

"""Asli Data oluşturuldu. sadece asli görev kayıtları var.

Asaleten 45 gün operasyonda çalışan kişi listesi oluşturuluyor.
"""

# Filtreleme koşullarını uygulayarak yeni bir DataFrame oluşturalım
Asli_List = Asli_data[(Asli_data['GRVKOD'].isin(oprs_grvkod))]

mask = (Asli_List['GRVKOD'] == 'GUV') & (Asli_List['YER TÜRÜ'] != 'ŞB') # üstteki kod bloğu sonrası silersin
Asli_List = Asli_List[~mask]

mask1 = (Asli_List['GRVKOD'] == 'KUR') & (Asli_List['YER TÜRÜ'] != 'ŞB') # üstteki kod bloğu sonrası silersin
Asli_List = Asli_List[~mask1]

mask2 = (Asli_List['GRVKOD'] == 'SOF') & (Asli_List['YER TÜRÜ'] != 'ŞB') # üstteki kod bloğu sonrası silersin
Asli_List = Asli_List[~mask2]

# Önce DataFrame'deki tüm sütun isimleri ile liste oluştur
tum_sutunlar = Asli_List.columns.tolist()

# Dataframe de kalmasını istediğiniz sütunlar
kalan_sutunlar = ['SİCİL', 'BAŞLANGIÇ TARİHİ', 'BİTİŞ TARİHİ','GÜN']

# Silinecek sütunlar listesi, yani kalan_sutunlar hariç tüm sütunlar
silinecek_sutunlar = [sutun for sutun in tum_sutunlar if sutun not in kalan_sutunlar]

# silinecek sütunları DataFrame'den çıkarın
Asli_List.drop(columns=silinecek_sutunlar, inplace=True)

# SİCİL'e göre gruplama ve GÜN'ün toplamını hesaplama
sicil_gun_toplam = Asli_List.groupby('SİCİL')['GÜN'].sum()

# SİCİL'e göre gruplama ve GÜN'ün toplamını hesaplama Sicilin Asaleten çalışmış olduğu gün sayısı
sicil_gun_toplam = Asli_List.groupby('SİCİL')['GÜN'].sum().reset_index()

# 45 gün ve üzeri olan sicilleri filtreleme Oprs sicilleri
siciller_45_gun_ustu = sicil_gun_toplam[sicil_gun_toplam['GÜN'] >= working_duty]['SİCİL']

#siciller_45_gun_ustu series olduğu için dataframe çevir...
Oprs_sicil = pd.DataFrame(siciller_45_gun_ustu, columns=['SİCİL'])

"""Operasyon kadrosunda asaleten çalışan kişi listesi oluşturuldu.

Operasyonda çalışan kişi listesini datası oluşturuluyor.
"""

#inner ile Oprs_sicil de bulunan bütün sicillerin Data kayıtlarını aldım.
Oprs_data = pd.merge(Oprs_sicil, Data, on='SİCİL', how='inner')

# dataframeler arası E topla leftle Oprs_sicil kayıtlarını koru (Asli_data olduğu için operasyon dışı kayıtlardan veri var.)
grouped_Asli = Asli_data.groupby('SİCİL')['GÜN'].sum()

# operasyon personelinin asli görev günleri toplamı (operasyon dışıda dahil)
Oprs_sicil_asli_gun = pd.merge(Oprs_sicil, grouped_Asli, on='SİCİL', how='left')

"""Asalet Gün bulunan dataframe Görev getirilecek"""

#Asalet görevi bulunan dataframe

# SİCİL ve GRVKOD'a göre gruplandırıp, GÜN sütununun maksimum değerlerini alalım.
grouped = Asli_data.groupby(['SİCİL','GRVKOD'])['GÜN'].max().reset_index()

#her sicil için en yüksek güne sahip GRVKODu bulma
max_days=grouped.groupby('SİCİL')['GÜN'].max().reset_index()
Asli_grvkod=pd.merge(grouped,max_days, on=['SİCİL','GÜN'])

"""--------------------------------------------------------------------------------"""

Operasyon = Oprs_data.copy(deep=True) #datanın zarar görmemesi için uygulanan metot.

# Düzenleme için Yeni sütunlar oluşturma ve değer atama
Operasyon['D BAŞLANGIÇ TARİHİ'] = Operasyon['BAŞLANGIÇ TARİHİ']
Operasyon['D BİTİŞ TARİHİ'] = Operasyon['BİTİŞ TARİHİ']

# D BAŞLANGIÇ TARİHİ ve D BİTİŞ TARİHİ sütunlarını güncelleme
Operasyon.loc[Operasyon['D BAŞLANGIÇ TARİHİ'] < period_start , 'D BAŞLANGIÇ TARİHİ'] = period_start
Operasyon.loc[Operasyon['D BİTİŞ TARİHİ'] > period_end, 'D BİTİŞ TARİHİ'] = period_end

# Siciller için GEÇİCİ GÖREV dönemlerini düzenleme
for sicil in Operasyon['SİCİL'].unique():
    # Sicilin geçici görev dönemlerini seçme
    gecici_gorevler = Operasyon[(Operasyon['SİCİL'] == sicil) & (Operasyon['DURUM'] == 'GEÇİCİ GÖREV')]
    gecici_gorevler = gecici_gorevler.sort_values('D BAŞLANGIÇ TARİHİ')

    # Geçici görev dönemleri arasındaki çakışmaları düzeltme
    for i in range(len(gecici_gorevler) - 1):
        if gecici_gorevler.iloc[i+1]['D BAŞLANGIÇ TARİHİ'] <= gecici_gorevler.iloc[i]['D BİTİŞ TARİHİ']:
            # Dönem bitiş tarihini, sonraki dönem başlangıç tarihinden bir gün önce yap
            new_bitis_tarihi = gecici_gorevler.iloc[i+1]['D BAŞLANGIÇ TARİHİ'] - pd.Timedelta(days=1)
            # Güncellemeyi DataFrame'e uygula
            Operasyon.loc[gecici_gorevler.index[i], 'D BİTİŞ TARİHİ'] = new_bitis_tarihi

# Veri tiplerini kontrol edip uygun şekilde dönüşüm yaparak "GÜN" sütunu oluşturalım
Operasyon['GÜN'] = (Operasyon['D BİTİŞ TARİHİ'].astype('datetime64[ns]') - Operasyon['D BAŞLANGIÇ TARİHİ'].astype('datetime64[ns]')).dt.days + 1

# Sicilin asli görev dönemi içindeki geçici görev dönemlerinin gün değerlerini asli görev dönemi gün değerinden çıkartma işlemi
# Önce sicillerin listesini al
siciller = Operasyon['SİCİL'].unique()

# Her sicil için işlem yapılacak
for sicil in siciller:
    asli_gorevler = Operasyon[(Operasyon['SİCİL'] == sicil) & (Operasyon['DURUM'] == 'ASLİ GÖREV')]
    gecici_gorevler = Operasyon[(Operasyon['SİCİL'] == sicil) & (Operasyon['DURUM'] == 'GEÇİCİ GÖREV')]

    # Her asli görev için geçici görevlerin sürelerini çıkarma
    for index, asli in asli_gorevler.iterrows():
        asli_baslangic = asli['D BAŞLANGIÇ TARİHİ']
        asli_bitis = asli['D BİTİŞ TARİHİ']

        # Geçici görevlerin sürelerini çıkart
        gecici_toplam_gun = gecici_gorevler[(gecici_gorevler['D BAŞLANGIÇ TARİHİ'] >= asli_baslangic) &
                                            (gecici_gorevler['D BİTİŞ TARİHİ'] <= asli_bitis)]['GÜN'].sum()

        # Asli görev günlerinden geçici görev günlerini çıkart
        Operasyon.loc[index, 'GÜN'] = asli['GÜN'] - gecici_toplam_gun

Operasyon.to_excel("Record.xlsx")

# Operasyonel ve operasyonel olmayan verileri ayır
oprs_data = Operasyon[Operasyon['GRVKOD'].isin(oprs_grvkod)]
non_oprs_data = Operasyon[~Operasyon['GRVKOD'].isin(oprs_grvkod)]

# Her sicil için operasyonel görevlerde çalışılan günleri topla
sum_days_per_grvkod = oprs_data.groupby(['SİCİL', 'GRVKOD'])['GÜN'].sum().reset_index()

# En fazla çalışılan görevi ve günleri bul
def max_gorev_details(group):
    max_days = group['GÜN'].max()
    top_grvkod = group[group['GÜN'] == max_days]
    if len(top_grvkod) > 1:
        return pd.Series({
            'GRVKOD': ', '.join(top_grvkod['GRVKOD']),
            'En fazla çalışılan gün': max_days,
            'Açıklama': 'Tie'
        })
    return pd.Series({
        'GRVKOD': top_grvkod['GRVKOD'].iloc[0],
        'En fazla çalışılan gün': max_days,
        'Açıklama': None
    })

new_gorev_df = sum_days_per_grvkod.groupby('SİCİL').apply(max_gorev_details).reset_index()

# Toplam operasyonel ve operasyonel olmayan günleri hesapla
total_oprs_days = sum_days_per_grvkod.groupby('SİCİL')['GÜN'].sum().reset_index().rename(columns={'GÜN': 'Total Oprs'})
total_non_oprs_days = non_oprs_data.groupby('SİCİL')['GÜN'].sum().reset_index().rename(columns={'GÜN': 'Total Diğer'})
total_days = Operasyon.groupby('SİCİL')['GÜN'].sum().reset_index().rename(columns={'GÜN': 'Total Gün'})

# DataFrame'leri birleştir
new_gorev_df = pd.merge(new_gorev_df, total_oprs_days, on='SİCİL', how='left')
new_gorev_df = pd.merge(new_gorev_df, total_non_oprs_days, on='SİCİL', how='left').fillna(0)
new_gorev_df = pd.merge(new_gorev_df, total_days, on='SİCİL', how='left')

# Mantıksal sınama sütunu ekle
new_gorev_df['Mantıksal sınama'] = new_gorev_df['Total Oprs'] <= 30

# Operasyonel ve operasyonel olmayan verileri ayır
oprs_data = Operasyon[Operasyon['GRVKOD'].isin(oprs_grvkod) & (Operasyon['YER TÜRÜ'] == 'ŞB')]

# Her SİCİL için her yer kodunda (YER KOD) çalışılan günlerin toplamını hesaplayın
place_days = oprs_data.groupby(['SİCİL', 'YER KOD'])['GÜN'].sum().reset_index()

# Her bir SİCİL için çalışılan maksimum günlerin yer kodunu bulun ve bağları kontrol edin
def max_place_details(group):
    max_days = group['GÜN'].max()
    top_places = group[group['GÜN'] == max_days]
    if len(top_places) > 1:
        return pd.Series({
            'YER KOD': ', '.join(top_places['YER KOD'].astype(str)),
            'Açıklama': 'Tie'
        })
    return pd.Series({
        'YER KOD': top_places['YER KOD'].iloc[0],
        'Açıklama': None
    })

# Applying the function to the grouped data
max_place_df = place_days.groupby('SİCİL').apply(max_place_details).reset_index()

# df2'deki YER KOD ve ASLİ SUBE KOD eşleşmelerini bir sözlüğe çevirme işlemi
yer_kod_to_asli_sube_kod = dict(zip(uydu['YER KOD'], uydu['ASLİ SUBE KOD']))

# df1'deki YER KOD sütununu kontrol edip, eğer df2'de karşılığı varsa ASLİ SUBE KOD ile güncelleme
max_place_df['YER KOD'] = max_place_df['YER KOD'].apply(lambda x: yer_kod_to_asli_sube_kod[x] if x in yer_kod_to_asli_sube_kod else x)

# 'Not' sütunu ekleyip değişikliklerin olduğu yerleri işaret koy
max_place_df['Not'] = max_place_df['YER KOD'].apply(lambda x: 'Uydu Şube Değişikliği Yapıldı' if x in yer_kod_to_asli_sube_kod.values() else '')

# Mantıksal sınama False olan satırlar
false_rows = new_gorev_df[new_gorev_df['Mantıksal sınama'] == False][['SİCİL', 'GRVKOD']]

# Mantıksal sınama True olan satırlar
true_rows = new_gorev_df[new_gorev_df['Mantıksal sınama'] == True][['SİCİL', 'Total Gün']]

# True olan satırlara Asli_data'dan GÜN sütununu ekle
true_rows = true_rows.merge(Asli_grvkod[['SİCİL', 'GRVKOD']], on='SİCİL', how='left')

# False ve True olan satırları birleştir
gorev_df = pd.concat([false_rows, true_rows])

gorev_df.drop("Total Gün",axis = 1, inplace= True )

df1 = pd.merge(Oprs_sicil_asli_gun, gorev_df, on='SİCİL', how='left')
df1 = pd.merge(df1, max_place_df, on='SİCİL', how='left')

"""yer kodu ve görev listeleri birleştirilmedi

**Güvenlik, Kurye ve Şoför Listesi oluşturma**

nihai grvkod getirilmedi

listeler birleştirilmedi
"""

# GRVKOD sütunu 'GUV' ve YER TÜRÜ sütunu 'ŞB' olan kayıtları filtreleyerek yeni bir DataFrame oluşturalım
GKS = Asli_data[(Asli_data['GRVKOD'].isin(['GUV','KUR', 'SOF'])) & (Asli_data['YER TÜRÜ'] == 'ŞB') ]

# 'GÜN'ün 45'ten küçük olduğu kayıtları filtrele
guv_45 = GKS[GKS['GÜN'] >= 45]

# 'SİCİL'e göre gruplandırın ve her bir 'SİCİL' için maksimum 'GÜN' olan 'YER KOD'u bul
max_gun_per_sicil = guv_45.groupby('SİCİL').apply(
    lambda x: x.loc[x['GÜN'].idxmax(), 'YER KOD']
)

# 'SİCİL' başına maksimum 'GÜN' cinsinden bağları kontrol et
ties = guv_45.groupby('SİCİL').apply(
    lambda x: x['GÜN'].value_counts().iloc[0] > 1 if len(x['GÜN'].value_counts()) > 0 else False
)

# Sonuçları birleştir
max_gun_per_sicil_ties = pd.DataFrame({
    'YER KOD': max_gun_per_sicil,
    'Eşitlik Durumu': ties
})
max_gun_per_sicil_ties.reset_index(inplace=True)

# 'GÜN'ü 'SİCİL' ile özetleyin ve 'SİCİL' ile yeni bir DataFrame oluştur
sicil_gun_summary = Asli_data.groupby('SİCİL')['GÜN'].sum().reset_index()

# 'En Fazla GÜN YER KODU' eklemek için 'max_gun_per_sicil_ties' DataFrame'i 'guv_gun' ile birleştir
guv_gun_merged = sicil_gun_summary.merge(max_gun_per_sicil_ties[['SİCİL', 'YER KOD']], on='SİCİL', how='right')

# df2'deki YER KOD ve ASLİ SUBE KOD eşleşmelerini bir sözlüğe çevirme işlemi
yer_kod_to_asli_sube_kod = dict(zip(uydu['YER KOD'], uydu['ASLİ SUBE KOD']))

# df1'deki YER KOD sütununu kontrol edip, eğer df2'de karşılığı varsa ASLİ SUBE KOD ile güncelleme
guv_gun_merged['YER KOD'] = guv_gun_merged['YER KOD'].apply(lambda x: yer_kod_to_asli_sube_kod[x] if x in yer_kod_to_asli_sube_kod else x)

# 'Not' sütunu ekleyip değişikliklerin olduğu yerleri işaret koy
guv_gun_merged['Not'] = guv_gun_merged['YER KOD'].apply(lambda x: 'Uydu Şube Değişikliği Yapıldı' if x in yer_kod_to_asli_sube_kod.values() else '')

df2 = GKS[['SİCİL','GRVKOD']]

df2= df2.drop_duplicates(subset='SİCİL',keep='first')

df2 = pd.merge(guv_gun_merged,df2, on='SİCİL', how='left')

"""--------------------------------------------------------------------------------"""

Prim_list = pd.concat([df1,df2])

Prim_list.to_excel('Prim Listesi.xlsx')