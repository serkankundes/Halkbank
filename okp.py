# -*- coding: utf-8 -*-
"""OKP.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NfHJJKv8wsdI-LXqdNhAko1BMPRqBo8Z
"""

import pandas as pd
import numpy as np

kktc = [898,899,1218,1675,1763]

"""**Ankes Puanı**"""

def YuzdeBes (x):
  return x * 100/5
def yuzdeOn (x):
  return x * 100/10
def YuzdeYetmis (x):
  return x * 100/70

df_Ankes_List = pd.read_excel("/content/Ankes.xlsx", index_col=0)
df = pd.read_excel("/content/Ankes.xlsx", index_col=0)

df["YP Kasa Limitleri Gerçekleşme Oranı (5%)"] = df["YP Kasa Limitleri Gerçekleşme Oranı (5%)"].apply(YuzdeBes)
df["TL+ATM limitleri  Gerçekleşme Oranı (70%)"] = df["TL+ATM limitleri  Gerçekleşme Oranı (70%)"].apply(YuzdeYetmis)
df["Para Bitmesi Seb. İşlem Dışı Kalma Sayısı (10%)"] = df["Para Bitmesi Seb. İşlem Dışı Kalma Sayısı (10%)"].apply(yuzdeOn)
df["Para Bitmesi Seb. İşlem Dışı Kalma Süresi (10%)"] = df["Para Bitmesi Seb. İşlem Dışı Kalma Süresi (10%)"].apply(yuzdeOn)
df["Kasa Mutabakat Onayı (%5)"] = df["Kasa Mutabakat Onayı (%5)"].apply(YuzdeBes)

weights = {'YP Kasa Limitleri Gerçekleşme Oranı (5%)': 0.05,
           'TL+ATM limitleri  Gerçekleşme Oranı (70%)': 0.70,
           'Para Bitmesi Seb. İşlem Dışı Kalma Sayısı (10%)': 0.10,
           'Para Bitmesi Seb. İşlem Dışı Kalma Süresi (10%)': 0.10,
           'Kasa Mutabakat Onayı (%5)': 0.05}

def calculate_score(row):
    score = 0
    weight = 0

    for col in ['YP Kasa Limitleri Gerçekleşme Oranı (5%)', 'TL+ATM limitleri  Gerçekleşme Oranı (70%)', 'Para Bitmesi Seb. İşlem Dışı Kalma Sayısı (10%)', 'Para Bitmesi Seb. İşlem Dışı Kalma Süresi (10%)', 'Kasa Mutabakat Onayı (%5)']:
        if pd.notnull(row[col]):
            score += row[col] * weights[col]
            weight += weights[col]

    if weight != 0:
        score /= weight

    score -= row['ATM MÜŞTERİ SORUNLARI CEZA PUANI']

    return score

df['ANKES VE ATM YÖNETİMİ (%20)'] = df.apply(calculate_score, axis=1)

df_Ankes = pd.merge(df_Ankes_List,df ,how="left",on="ŞUBE KODU")

temp = df_Ankes['YP Kasa Limitleri Gerçekleşme Oranı (5%)_y']
df_Ankes.drop(columns=['YP Kasa Limitleri Gerçekleşme Oranı (5%)_y'], inplace=True)
df_Ankes.insert(1, 'YP Kasa Limitleri Gerçekleşme Oranı (5%)_y', temp)
temp = df_Ankes['TL+ATM limitleri  Gerçekleşme Oranı (70%)_x']
df_Ankes.drop(columns=['TL+ATM limitleri  Gerçekleşme Oranı (70%)_x'], inplace=True)
df_Ankes.insert(2, 'TL+ATM limitleri  Gerçekleşme Oranı (70%)_x', temp)
temp = df_Ankes['TL+ATM limitleri  Gerçekleşme Oranı (70%)_y']
df_Ankes.drop(columns=['TL+ATM limitleri  Gerçekleşme Oranı (70%)_y'], inplace=True)
df_Ankes.insert(3, 'TL+ATM limitleri  Gerçekleşme Oranı (70%)_y', temp)
temp = df_Ankes['Para Bitmesi Seb. İşlem Dışı Kalma Sayısı (10%)_x']
df_Ankes.drop(columns=['Para Bitmesi Seb. İşlem Dışı Kalma Sayısı (10%)_x'], inplace=True)
df_Ankes.insert(4, 'Para Bitmesi Seb. İşlem Dışı Kalma Sayısı (10%)_x', temp)
temp = df_Ankes['Para Bitmesi Seb. İşlem Dışı Kalma Sayısı (10%)_y']
df_Ankes.drop(columns=['Para Bitmesi Seb. İşlem Dışı Kalma Sayısı (10%)_y'], inplace=True)
df_Ankes.insert(5, 'Para Bitmesi Seb. İşlem Dışı Kalma Sayısı (10%)_y', temp)
temp = df_Ankes['Para Bitmesi Seb. İşlem Dışı Kalma Süresi (10%)_x']
df_Ankes.drop(columns=['Para Bitmesi Seb. İşlem Dışı Kalma Süresi (10%)_x'], inplace=True)
df_Ankes.insert(6, 'Para Bitmesi Seb. İşlem Dışı Kalma Süresi (10%)_x', temp)
temp = df_Ankes['Para Bitmesi Seb. İşlem Dışı Kalma Süresi (10%)_y']
df_Ankes.drop(columns=['Para Bitmesi Seb. İşlem Dışı Kalma Süresi (10%)_y'], inplace=True)
df_Ankes.insert(7, 'Para Bitmesi Seb. İşlem Dışı Kalma Süresi (10%)_y', temp)
temp = df_Ankes['Kasa Mutabakat Onayı (%5)_x']
df_Ankes.drop(columns=['Kasa Mutabakat Onayı (%5)_x'], inplace=True)
df_Ankes.insert(8, 'Kasa Mutabakat Onayı (%5)_x', temp)
temp = df_Ankes['Kasa Mutabakat Onayı (%5)_y']
df_Ankes.drop(columns=['Kasa Mutabakat Onayı (%5)_y'], inplace=True)
df_Ankes.insert(9, 'Kasa Mutabakat Onayı (%5)_y', temp)

df_Ankes.rename(columns={'YP Kasa Limitleri Gerçekleşme Oranı (5%)_x': 'YP Kasa Limitleri Gerçekleşme Oranı (5%)'}, inplace=True)
df_Ankes.rename(columns={'YP Kasa Limitleri Gerçekleşme Oranı (5%)_y': 'YP Kasa Limitleri Gerçekleşme Puanı (5%)'}, inplace=True)
df_Ankes.rename(columns={'TL+ATM limitleri  Gerçekleşme Oranı (70%)_x': 'TL+ATM limitleri  Gerçekleşme Oranı (70%)'}, inplace=True)
df_Ankes.rename(columns={'TL+ATM limitleri  Gerçekleşme Oranı (70%)_y': 'TL+ATM limitleri  Gerçekleşme Puanı (70%)'}, inplace=True)
df_Ankes.rename(columns={'Para Bitmesi Seb. İşlem Dışı Kalma Sayısı (10%)_x': 'Para Bitmesi Seb. İşlem Dışı Kalma Sayısı (10%)'}, inplace=True)
df_Ankes.rename(columns={'Para Bitmesi Seb. İşlem Dışı Kalma Sayısı (10%)_y': 'Para Bitmesi Seb. İşlem Dışı Kalma Puanı (10%)'}, inplace=True)
df_Ankes.rename(columns={'Para Bitmesi Seb. İşlem Dışı Kalma Süresi (10%)_x': 'Para Bitmesi Seb. İşlem Dışı Kalma Süresi (10%)'}, inplace=True)
df_Ankes.rename(columns={'Para Bitmesi Seb. İşlem Dışı Kalma Süresi (10%)_y': 'Para Bitmesi Seb. İşlem Dışı Kalma Puanı (10%)'}, inplace=True)
df_Ankes.rename(columns={'Kasa Mutabakat Onayı (%5)_x': 'Kasa Mutabakat Onayı (%5)'}, inplace=True)
df_Ankes.rename(columns={'Kasa Mutabakat Onayı (%5)_y': 'Kasa Mutabakat Puanı (%5)'}, inplace=True)
df_Ankes.rename(columns={'ATM MÜŞTERİ SORUNLARI CEZA PUANI_x': 'ATM MÜŞTERİ SORUNLARI CEZA PUANI'}, inplace=True)

df_Ankes.drop(columns=['ATM MÜŞTERİ SORUNLARI CEZA PUANI_y'],axis = 1 ,inplace=True)

df_Sube_List = pd.read_excel("/content/Şube Listesi.xlsx",index_col=0)

df_Ankes = pd.merge(df_Sube_List,df_Ankes,how="left",on="ŞUBE KODU")

"""**Kurumsal İmaj**"""

df_Sube = pd.read_excel("/content/Şube.xlsx",index_col=0)
df_GizliMüst = pd.read_excel("/content/GizliMüsteri.xlsx",index_col=0)
df_MMA = pd.read_excel("/content/MMA.xlsx",index_col=0)
df_İcAnket = pd.read_excel("/content/İçkontrolKaliteAnketi.xlsx",index_col=0)

df_Kurumsal = pd.merge(df_Sube, df_GizliMüst, how="left", on="ŞUBE KODU")
df_Kurumsal = pd.merge(df_Kurumsal, df_MMA, how="left", on="ŞUBE KODU")
df_Kurumsal = pd.merge(df_Kurumsal, df_İcAnket, how="left", on="ŞUBE KODU")

weights = {'Gizli Müşteri Değerlendirmesi (40%)': 0.4,
           'Müşteri Memnuniyet Araştırması (40%)': 0.4,
           'İç Kontrol Şube Risk ve Kalite Anketi (20%)': 0.2}

def calculate_score(row):
    score = 0
    weight = 0
    all_nan = True  # Tüm değerlerin NaN olduğunu varsayarak başla

    for col in ['Gizli Müşteri Değerlendirmesi (40%)', 'Müşteri Memnuniyet Araştırması (40%)', 'İç Kontrol Şube Risk ve Kalite Anketi (20%)']:
        if pd.notnull(row[col]):
            score += row[col] * weights[col]
            weight += weights[col]
            all_nan = False  # En az bir değer NaN değilse bu değişkeni güncelle

    if all_nan:  # Eğer tüm değerler NaN ise
        return np.nan  # NaN
    elif weight != 0:
        return score / weight  # Ağırlık toplamı sıfırdan farklıysa
    else:
        return 0  # Ağırlık toplamı sıfırsa 0 (Bu durum normalde olmamalıdır çünkü tüm değerler NaN ise all_nan kontrolünden dönmüştür)

# Veri setine uygula
df_Kurumsal['KURUMSAL İMAJ (15%)'] = df_Kurumsal.apply(calculate_score, axis=1)

"""**Veri Kalitesi**"""

df_Sube = pd.read_excel("/content/Şube.xlsx",index_col=0)
df_MutaTarama = pd.read_excel("/content/Muta Belge Tarama.xlsx",index_col=0)
df_FisTarama = pd.read_excel("/content/Fiş Tarama.xlsx",index_col=0)
df_TemsTarama = pd.read_excel("/content/Tems Tarama.xlsx",index_col=0)

df_Veri = pd.merge(df_Sube, df_MutaTarama, how="left", on="ŞUBE KODU")
df_Veri = pd.merge(df_Veri, df_FisTarama, how="left", on="ŞUBE KODU")
df_Veri = pd.merge(df_Veri, df_TemsTarama, how="left", on="ŞUBE KODU")

weights = {'MUTA Belge Tarama Oranı (40%)': 0.4,
           'Fiş Tarama Oranı (30%)': 0.3,
           'TEMS Tarama Oranı (30%)': 0.3}


def calculate_score(row):
    score = 0
    weight = 0
    all_nan = True  # Tüm değerlerin NaN olduğunu varsayarak başla

    for col in ['MUTA Belge Tarama Oranı (40%)', 'Fiş Tarama Oranı (30%)', 'TEMS Tarama Oranı (30%)']:
        if pd.notnull(row[col]):
            score += row[col] * weights[col]
            weight += weights[col]
            all_nan = False  # En az bir değer NaN değilse bu değişkeni güncelle

    if all_nan:  # Eğer tüm değerler NaN ise
        return np.nan  # NaN dön
    elif weight != 0:
        return score / weight  # Ağırlık toplamı sıfırdan farklıysa
    else:
        return 0  # Ağırlık toplamı sıfırsa (Bu durum normalde olmamalıdır çünkü tüm değerler NaN ise all_nan kontrolünden dönmüştür)

# Veri setine uygula
df_Veri['VERİ KALİTESİ  (5%)'] = df_Veri.apply(calculate_score, axis=1)

"""**Operasyon Merkezi İade Oranı**"""

df_Sube = pd.read_excel("/content/Şube.xlsx",index_col=0)
df_TemSoz = pd.read_excel("/content/Teminat ve Sözleşme.xlsx",index_col=0)
df_TemMek = pd.read_excel("/content/Teminat Mektubu.xlsx",index_col=0)
df_EftHav = pd.read_excel("/content/EFT Havale.xlsx",index_col=0)

df_MOPS = pd.merge(df_Sube, df_TemSoz, how="left", on="ŞUBE KODU")
df_MOPS = pd.merge(df_MOPS, df_TemMek, how="left", on="ŞUBE KODU")
df_MOPS = pd.merge(df_MOPS, df_EftHav, how="left", on="ŞUBE KODU")

df_MOPS.loc[kktc] = np.nan

weights = {
    'Teminat ve Sözleşme İade Oranı (40%)': 0.4,
    'Teminat mektubu İade Oranı (%40)': 0.4,
    'EFT/Havale iade Oranı (20%)': 0.2
}

def calculate_score(row):
    score = 0
    weight = 0
    all_nan = True  # Tüm değerlerin NaN olduğunu varsayarak başla

    for col in ['Teminat ve Sözleşme İade Oranı (40%)', 'Teminat mektubu İade Oranı (%40)', 'EFT/Havale iade Oranı (20%)']:
        if pd.notnull(row[col]):
            score += row[col] * weights[col]
            weight += weights[col]
            all_nan = False  # En az bir değer NaN değilse bu değişkeni güncelle

    if all_nan:  # Eğer tüm değerler NaN ise
        return np.nan  # NaN
    elif weight != 0:
        return score / weight  # Ağırlık toplamı sıfırdan farklıysa
    else:
        return 0  # Ağırlık toplamı sıfırsa 0 (Bu durum normalde olmamalıdır çünkü tüm değerler NaN ise all_nan kontrolünden dönmüştür)

# Veri setine uygula
df_MOPS['OPERASYON MERKEZİ İADE ORANI (20%)'] = df_MOPS.apply(calculate_score, axis=1)

"""**Şube Operasyonel Risk Düzeyi**"""

df_Sube = pd.read_excel("/content/Şube.xlsx",index_col=0)
df_IcKontrol = pd.read_excel("/content/İç kontrol.xlsx",index_col=0)
df_Teftis = pd.read_excel("/content/Teftiş.xlsx",index_col=0)

df_Risk = pd.merge(df_Sube, df_IcKontrol, how="left", on="ŞUBE KODU")
df_Risk = pd.merge(df_Risk, df_Teftis, how="left", on="ŞUBE KODU")

weights = {'İç Kontrol Operasyon Risk Notu (70%)': 0.7,
           'TKB Bulgu Takibi, Bulgu Giderilme Süresi  (30%)': 0.3,}

def calculate_score(row):
    score = 0
    weight = 0
    all_nan = True  # Tüm değerlerin NaN olduğunu varsayarak başla

    for col in ['İç Kontrol Operasyon Risk Notu (70%)', 'TKB Bulgu Takibi, Bulgu Giderilme Süresi  (30%)']:
        if pd.notnull(row[col]):
            score += row[col] * weights[col]
            weight += weights[col]
            all_nan = False  # En az bir değer NaN değilse bu değişkeni güncelle

    if all_nan:  # Eğer tüm değerler NaN ise
        return np.nan  # NaN dön
    elif weight != 0:
        return score / weight  # Ağırlık toplamı sıfırdan farklıysa
    else:
        return 0  # Ağırlık toplamı sıfırsa 0 (Bu durum normalde olmamalıdır çünkü tüm değerler NaN ise all_nan kontrolünden dönmüştür)

# Veri setine uygula
df_Risk['ŞUBE OPERASYONEL RİSK DÜZEYİ (10%)'] = df_Risk.apply(calculate_score, axis=1)

"""**Lobi Yoğunluğu Yönetimi**"""

df_Sube = pd.read_excel("/content/Şube.xlsx",index_col=0)
df_Siramatik = pd.read_excel("/content/Sıramatik.xlsx",index_col=0)
df_NakitTah = pd.read_excel("/content/Nakit Tahsilata Kısıtlı.xlsx",index_col=0)
df_NakitCek = pd.read_excel("/content/Nakit Çekilen.xlsx",index_col=0)
df_Genel_Müd = pd.read_excel("/content/Genel Müdürlük.xlsx")

df_Lobi = pd.merge(df_Sube, df_Siramatik, how="left", on="ŞUBE KODU")
df_Lobi = pd.merge(df_Lobi, df_NakitTah, how="left", on="ŞUBE KODU")
df_Lobi = pd.merge(df_Lobi, df_NakitCek, how="left", on="ŞUBE KODU")

genel_mud_sube_kodlari = df_Genel_Müd['ŞUBE KODU'].tolist()

df_Lobi.loc[genel_mud_sube_kodlari] = np.nan

"""Karaköy ve TBMM Şubesi 7500 tl muafiyeti"""

df_Lobi.loc[142,'Nakit Çekilen İşlemleri ATM’ye Yönl Oranı (30%)']= np.nan
df_Lobi.loc[1479,'Nakit Çekilen İşlemleri ATM’ye Yönl Oranı (30%)']= np.nan

def calculate_score(value):
    if pd.isnull(value):
        return value
    elif value >= 80:
        return 100
    elif value >= 70:
        return 90
    elif value >= 60:
        return 80
    elif value >= 50:
        return 70
    elif value >= 40:
        return 60
    elif value >= 30:
        return 50
    elif value >= 0:
        return 40
    else:
        return 0

df_Lobi['Nakit Tahsilata Kısıtlanan İşlemler Puanı  (30%)'] = df_Lobi['Nakit Tahsilata Kısıtlanan İşlemler Oranı  (30%)'].apply(calculate_score)
df_Lobi['Nakit Çekilen İşlemleri ATM’ye Yönl Puanı (30%)'] = df_Lobi['Nakit Çekilen İşlemleri ATM’ye Yönl Oranı (30%)'].apply(calculate_score)

weights = {'Sıramatik Kullanım Oranı (40%)': 0.4,
           'Nakit Tahsilata Kısıtlanan İşlemler Puanı  (30%)': 0.3,
           'Nakit Çekilen İşlemleri ATM’ye Yönl Puanı (30%)': 0.3}

def calculate_score(row):
    score = 0
    weight = 0
    all_nan = True  # Tüm değerlerin NaN olduğunu varsayarak başla

    for col in ['Sıramatik Kullanım Oranı (40%)', 'Nakit Tahsilata Kısıtlanan İşlemler Puanı  (30%)', 'Nakit Çekilen İşlemleri ATM’ye Yönl Puanı (30%)']:
        if pd.notnull(row[col]):
            score += row[col] * weights[col]
            weight += weights[col]
            all_nan = False  # En az bir değer NaN değilse bu değişkeni güncelle

    if all_nan:  # Eğer tüm değerler NaN ise
        return np.nan  # NaN
    elif weight != 0:
        return score / weight  # Ağırlık toplamı sıfırdan farklıysa skor
    else:
        return 0  # Ağırlık toplamı sıfırsa 0 (Bu durum normalde olmamalıdır çünkü tüm değerler NaN ise all_nan kontrolünden dönmüştür)

# Veri setine uygula
df_Lobi['LOBİ YOĞUNLUK YÖNETİMİ (30%)'] = df_Lobi.apply(calculate_score, axis=1)

df_Lobi = df_Lobi[['Sıramatik Kullanım Oranı (40%)', 'Nakit Tahsilata Kısıtlanan İşlemler Oranı  (30%)','Nakit Tahsilata Kısıtlanan İşlemler Puanı  (30%)', 'Nakit Çekilen İşlemleri ATM’ye Yönl Oranı (30%)','Nakit Çekilen İşlemleri ATM’ye Yönl Puanı (30%)','LOBİ YOĞUNLUK YÖNETİMİ (30%)']]

"""**DataFrameleri Birleştirme**"""

df_Sube_List = pd.read_excel("/content/Şube Listesi.xlsx",index_col=0)

df_Okp = pd.merge(df_Sube, df_Ankes, how="left", on="ŞUBE KODU")
df_Okp  = pd.merge(df_Okp , df_Kurumsal, how="left", on="ŞUBE KODU")
df_Okp  = pd.merge(df_Okp , df_Veri, how="left", on="ŞUBE KODU")
df_Okp = pd.merge(df_Okp, df_MOPS, how="left", on="ŞUBE KODU")
df_Okp  = pd.merge(df_Okp , df_Risk, how="left", on="ŞUBE KODU")
df_Okp  = pd.merge(df_Okp , df_Lobi, how="left", on="ŞUBE KODU")

df_GM =  df_Okp[df_Okp['BÖLGE ADI']=='GENEL MÜDÜRLÜK']

weights = {'ANKES VE ATM YÖNETİMİ (%20)': 0.2,
           'KURUMSAL İMAJ (15%)': 0.15,
           'VERİ KALİTESİ  (5%)': 0.05,
           'OPERASYON MERKEZİ İADE ORANI (20%)':0.5,
           'ŞUBE OPERASYONEL RİSK DÜZEYİ (10%)':0.1
           }

def calculate_score(row):
    score = 0
    weight = 0

    for col in ['ANKES VE ATM YÖNETİMİ (%20)', 'KURUMSAL İMAJ (15%)', 'VERİ KALİTESİ  (5%)','OPERASYON MERKEZİ İADE ORANI (20%)','ŞUBE OPERASYONEL RİSK DÜZEYİ (10%)']:
        if pd.notnull(row[col]):
            score += row[col] * weights[col]
            weight += weights[col]

    if weight != 0:
        score /= weight


    return score

df_GM['OPERASYONEL KALİTE PUANI'] = df_GM.apply(calculate_score, axis=1)

df_SB = df_Okp[~df_Okp['BÖLGE ADI'].isin(['GENEL MÜDÜRLÜK'])]

weights = {'ANKES VE ATM YÖNETİMİ (%20)': 0.2,
           'KURUMSAL İMAJ (15%)': 0.15,
           'VERİ KALİTESİ  (5%)': 0.05,
           'OPERASYON MERKEZİ İADE ORANI (20%)':0.2,
           'ŞUBE OPERASYONEL RİSK DÜZEYİ (10%)':0.1,
           'LOBİ YOĞUNLUK YÖNETİMİ (30%)':0.3}

def calculate_score(row):
    score = 0
    weight = 0

    for col in ['ANKES VE ATM YÖNETİMİ (%20)', 'KURUMSAL İMAJ (15%)', 'VERİ KALİTESİ  (5%)','OPERASYON MERKEZİ İADE ORANI (20%)','ŞUBE OPERASYONEL RİSK DÜZEYİ (10%)','LOBİ YOĞUNLUK YÖNETİMİ (30%)']:
        if pd.notnull(row[col]):
            score += row[col] * weights[col]
            weight += weights[col]

    if weight != 0:
        score /= weight


    return score

df_SB['OPERASYONEL KALİTE PUANI'] = df_SB.apply(calculate_score, axis=1)

df_Okp  = pd.concat([df_SB,df_GM])

df_Okp = df_Okp.sort_values(by='OPERASYONEL KALİTE PUANI', ascending=False)

df_Okp.to_excel("Operasyonel Kalite Puan.xlsx")