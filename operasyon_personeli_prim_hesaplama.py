# -*- coding: utf-8 -*-
"""Operasyon Personeli Prim Hesaplama.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZooD3XncZ2fAAM01zXVq5T4RnkbVZWPS
"""

import pandas as pd
import numpy as np
working_day = 91

df = pd.read_excel('/content/Prim Listesi modify.xlsx')
tablo_df = pd.read_excel('/content/Tablo.xlsx')

# Önceki adımı tekrar edelim ve ilgili koşulları yeniden kontrol edelim
filtered_df = df[~df['SEGMENT'].str.startswith('SERBEST') & ~df['GÖREV'].isin(['KUR', 'SOF'])]

# KURUMSAL ŞUBE, TİCARİ ŞUBE ve KKTC olan SEGMENT ve ÖLÇEK sütunu BHA olan satırları filtreleyelim
filtered_condition = (filtered_df['SEGMENT'].isin(['KURUMSAL ŞUBE', 'TİCARİ ŞUBE', 'KKTC'])) & (filtered_df['ÖLÇEK'] == 'BHA')

# Bu koşula uyan satırların PORTFÖY MUAFİYET sütununa 'EVET' değerini atayalım
filtered_df.loc[filtered_condition, 'PORTFÖY MUAFİYET'] = 'EVET'

# NaN değerlerinin her iki veri de uygun şekilde işlendiğinden emin ol
df['ÖLÇEK'].fillna('', inplace=True)
tablo_df['ÖLÇEK'].fillna('', inplace=True)

# PRİM BAZ TUTAR sütununu NaN ile başla
df['PRİM BAZ TUTAR'] = float('nan')

# satırlar üzerinde yineleme
for index, row in df.iterrows():
    segment = row['SEGMENT']
    olcek = row['ÖLÇEK']
    gorev = row['GÖREV']

    # koşullara göre filtre
    if segment in ['KURUMSAL ŞUBE', 'KKTC', 'SERBEST BÖLGE ŞUBESİ']:
        filtered_tablo = tablo_df[(tablo_df['SEGMENT'] == segment)]
    else:
        filtered_tablo = tablo_df[(tablo_df['SEGMENT'] == segment) & (tablo_df['ÖLÇEK'] == olcek)]

    if not filtered_tablo.empty:
        # Sütunun mevcut olduğu kontrolü
        if gorev in filtered_tablo.columns:
            prim_baz_tutar = filtered_tablo[gorev].values[0]
            # PRİM BAZ TUTAR sütununa atayın
            df.at[index, 'PRİM BAZ TUTAR'] = prim_baz_tutar

serbest_df = df[df['SEGMENT'].str.startswith('SERBEST')]
kur_sof_df = df[df['GÖREV'].isin(['KUR', 'SOF'])]

df=df[~df['SEGMENT'].str.startswith('SERBEST') &~df['GÖREV'].isin(['KUR', 'SOF'])]

# İlk olarak SEGMENT'e göre DataFrame'ler oluştur
segment_dfs = {seg: df[df['SEGMENT'] == seg].copy() for seg in df['SEGMENT'].unique()}

# Yeni şube ve görevlere göre DataFrame'ler oluşturmak için geçici bir sözlük kullan
temp_dfs = {}

for seg, seg_df in segment_dfs.items():
    # Yeni şube olan kayıtları ayır
    new_branch_df = seg_df[seg_df['YENİ ŞUBE'] == 'EVET']
    if not new_branch_df.empty:
        # Yeni şube olanları GUV, KUR, SOF görevlerine göre ayır
        for task in ['GUV', 'KUR', 'SOF']:
            task_df = new_branch_df[new_branch_df['GÖREV'] == task]
            if not task_df.empty:
                temp_dfs[f"{seg}_YENİ_ŞUBE_{task}"] = task_df
                new_branch_df = new_branch_df[new_branch_df['GÖREV'] != task]

        # Kalan yeni şube olanları kaydet
        temp_dfs[f"{seg}_YENİ_ŞUBE"] = new_branch_df
        # Yeni şube olan kayıtları orijinal segment DataFrame'inden çıkar
        seg_df = seg_df[seg_df['YENİ ŞUBE'] != 'EVET']

    # GÖREV'ler için GUV, KUR, SOF'a göre ayrım yapma işlemi
    for task in ['GUV', 'KUR', 'SOF']:
        task_df = seg_df[seg_df['GÖREV'] == task]
        if not task_df.empty:
            temp_dfs[f"{seg}_{task}"] = task_df
            # İlgili GÖREV'e sahip kayıtları segment DataFrame'inden çıkar
            seg_df = seg_df[seg_df['GÖREV'] != task]

    # Güncellenmiş segment DataFrame'ini geri kaydet
    segment_dfs[seg] = seg_df

# Geçici DataFrame'leri ana sözlüğe ekleme işlemi
segment_dfs.update(temp_dfs)

# Segment ve görevlere göre ayrılmış DataFrame'lerin anahtarlarını (isimlerini) listelemek için
list(segment_dfs.keys())

"""**Dataframe parçalama işlemlemi bitti...**.

Prim performans puanı hesaplama
"""

def calculate_performance(df):
    # PORTFÖY sütunu NaN değerlerini 0 ile doldur ve 100 ile sınırla
    df['PORTFÖY'] = df['PORTFÖY'].fillna(0).clip(upper=100)

    # GÖREV'i BHA ve MIS olmayan sicillerin performans puanı hesaplaması
    df.loc[~df['GÖREV'].isin(['BHA', 'MIS']), 'PRİM PERFORMANS PUANI'] = (
        0.90 * df['OKP'] + 0.10 * df['SAYISAL PERFORMANS']
    )

    # GÖREV'i BHA ve MIS olup PORTFÖY MUAFİYET'i EVET olan sicillerin performans puanı hesaplaması
    condition = df['GÖREV'].isin(['BHA', 'MIS']) & df['PORTFÖY MUAFİYET'].eq('EVET')
    df.loc[condition, 'PRİM PERFORMANS PUANI'] = (
        0.90 * df['OKP'] + 0.10 * df['SAYISAL PERFORMANS']
    )

    # GÖREV'i BHA ve MIS olup PORTFÖY MUAFİYET'i EVET olmayan sicillerin performans puanı hesaplaması
    condition = df['GÖREV'].isin(['BHA', 'MIS']) & df['PORTFÖY MUAFİYET'].ne('EVET')
    df.loc[condition, 'PRİM PERFORMANS PUANI'] = (
        0.90 * (0.50 * df['OKP'] + 0.50 * df['PORTFÖY']) + 0.10 * df['SAYISAL PERFORMANS']
    )

# İlgili DataFrame'lere hesaplama uygulama
for key in segment_dfs.keys():
    if not (key.endswith('GUV')):
        calculate_performance(segment_dfs[key])

"""Prim Durumu ve Başarı Skala oluşturma.

KKTC ve GUV hariç
"""

# Fonksiyon tanımı: Yüzdelik hesaplamalar ve yeni sütun ekleme
def calculate_performance_metrics(df):
    df = df.copy()

    # BAŞARI SKALA ve PRİM DURUMU adında iki sütun oluştur
    df['BAŞARI SKALA'] = np.nan
    df['PRİM DURUMU'] = np.nan

    # GÖREV sütununa göre sınıflama, MIS, BHA ve MAS'ı aynı grupta değerlendir
    for task in df['GÖREV'].unique():
        if task in ['MIS', 'BHA', 'MAS']:
            task_df = df[df['GÖREV'].isin(['MIS', 'BHA', 'MAS'])].copy()
        else:
            task_df = df[df['GÖREV'] == task].copy()

        task_df.sort_values(by='PRİM PERFORMANS PUANI', ascending=False, inplace=True)

        total = len(task_df)
        perc_10 = int(np.floor(0.10 * total + 0.5))
        perc_30 = int(np.floor(0.30 * total + 0.5))
        perc_55 = int(np.floor(0.55 * total + 0.5))
        perc_80 = int(np.floor(0.80 * total + 0.5))

        # Yüzdelik kişi sayısını hesaplarken ŞUBE KODU eşitliklerini dikkate al
        for i in range(total):
            if i < perc_10:
                task_df.loc[task_df.index[i], 'BAŞARI SKALA'] = 2.8
                task_df.loc[task_df.index[i], 'PRİM DURUMU'] = 'Prim alır'
            elif i < perc_30:
                task_df.loc[task_df.index[i], 'BAŞARI SKALA'] = 2.2
                task_df.loc[task_df.index[i], 'PRİM DURUMU'] = 'Prim alır'
            elif i < perc_55:
                task_df.loc[task_df.index[i], 'BAŞARI SKALA'] = 1.7
                task_df.loc[task_df.index[i], 'PRİM DURUMU'] = 'Prim alır'
            elif i < perc_80:
                task_df.loc[task_df.index[i], 'BAŞARI SKALA'] = 1.2
                task_df.loc[task_df.index[i], 'PRİM DURUMU'] = 'Prim alır'

        # Yüzdelik değerin son indeks ŞUBE KODU değeri bir sonraki indeksin ŞUBE KODU'na eşit olamaz
        for perc, val in zip([perc_10, perc_30, perc_55, perc_80], [2.8, 2.2, 1.7, 1.2]):
            if perc < total and task_df.iloc[perc - 1]['ŞUBE KODU'] == task_df.iloc[perc]['ŞUBE KODU']:
                while perc < total and task_df.iloc[perc - 1]['ŞUBE KODU'] == task_df.iloc[perc]['ŞUBE KODU']:
                    task_df.loc[task_df.index[perc], 'BAŞARI SKALA'] = val
                    task_df.loc[task_df.index[perc], 'PRİM DURUMU'] = 'Prim alır'
                    perc += 1

        df.update(task_df)

    return df

# Hesaplamaları uygulamak için
for key in segment_dfs.keys():
    if not (key.endswith('GUV') or key.startswith('KKTC')):
        segment_dfs[key] = calculate_performance_metrics(segment_dfs[key])

"""KKTC"""

# KKTC için Fonksiyon tanımı: Yüzdelik hesaplamalar ve yeni sütun ekleme
def calculate_performance_metrics(df):
    df = df.copy()

    # BAŞARI SKALA ve PRİM DURUMU adında iki sütun oluştur
    df['BAŞARI SKALA'] = np.nan
    df['PRİM DURUMU'] = np.nan

    # GÖREV sütununa göre sınıflama, MIS, BHA ve MAS'ı aynı grupta değerlendir
    for task in df['GÖREV'].unique():
        if task in ['MIS', 'BHA', 'MAS']:
            task_df = df[df['GÖREV'].isin(['MIS', 'BHA', 'MAS'])].copy()
        else:
            task_df = df[df['GÖREV'] == task].copy()

        task_df.sort_values(by='PRİM PERFORMANS PUANI', ascending=False, inplace=True)

        total = len(task_df)
        perc_10 = int(np.floor(0.10 * total + 0.5))
        perc_30 = int(np.floor(0.30 * total + 0.5))
        perc_55 = int(np.floor(0.55 * total + 0.5))
        perc_80 = int(np.floor(0.80 * total + 0.5))

        # Yüzdelik kişi sayısını hesaplarken ŞUBE KODU eşitliklerini dikkate al
        for i in range(total):
            if i < perc_10:
                task_df.loc[task_df.index[i], 'BAŞARI SKALA'] = 2.3
                task_df.loc[task_df.index[i], 'PRİM DURUMU'] = 'Prim alır'
            elif i < perc_30:
                task_df.loc[task_df.index[i], 'BAŞARI SKALA'] = 1.7
                task_df.loc[task_df.index[i], 'PRİM DURUMU'] = 'Prim alır'
            elif i < perc_55:
                task_df.loc[task_df.index[i], 'BAŞARI SKALA'] = 1.5
                task_df.loc[task_df.index[i], 'PRİM DURUMU'] = 'Prim alır'
            elif i < perc_80:
                task_df.loc[task_df.index[i], 'BAŞARI SKALA'] = 1.2
                task_df.loc[task_df.index[i], 'PRİM DURUMU'] = 'Prim alır'

        # Yüzdelik değerin son indeks ŞUBE KODU değeri bir sonraki indeksin ŞUBE KODU'na eşit olamaz
        for perc, val in zip([perc_10, perc_30, perc_55, perc_80], [2.3, 1.7, 1.5, 1.2]):
            if perc < total and task_df.iloc[perc - 1]['ŞUBE KODU'] == task_df.iloc[perc]['ŞUBE KODU']:
                while perc < total and task_df.iloc[perc - 1]['ŞUBE KODU'] == task_df.iloc[perc]['ŞUBE KODU']:
                    task_df.loc[task_df.index[perc], 'BAŞARI SKALA'] = val
                    task_df.loc[task_df.index[perc], 'PRİM DURUMU'] = 'Prim alır'
                    perc += 1

        df.update(task_df)

    return df

# segment_dfs dictionary'sini güncelleme
for key in segment_dfs.keys():
    if key.startswith('KKTC') and not key.endswith('GUV'):
        segment_dfs[key] = calculate_performance_metrics(segment_dfs[key])

"""GUV için PRİM DURUMU dataframe oluştur."""

# Benzersiz ŞUBE KODU değerleri ve bunlara karşılık gelen PRİM DURUMU ile bir DataFrame oluştur
prim_alir_sube_kodu_df = pd.DataFrame()

for key, seg_df in segment_dfs.items():
    if 'PRİM DURUMU' in seg_df.columns:
        prim_alir_df = seg_df[seg_df['PRİM DURUMU'] == 'Prim alır']
        unique_sube_kodu = prim_alir_df['ŞUBE KODU'].unique()
        prim_alir_sube_kodu_df = pd.concat([prim_alir_sube_kodu_df, pd.DataFrame({'ŞUBE KODU': unique_sube_kodu, 'PRİM DURUMU': ['Prim alır'] * len(unique_sube_kodu)})])

# Son DataFrame için dizini sıfır
prim_alir_sube_kodu_df.reset_index(drop=True, inplace=True)

# 'Prim alır' satırları için PRİM TUTARI sütununu ekleyin ve hesapla
for name, df in segment_dfs.items():
    if not (name.endswith('GUV')):
        df['PRİM TUTARI'] = np.nan  # PRİM TUTARI sütununu başla

        prim_alir_df = df[df['PRİM DURUMU'] == 'Prim alır']
        if not prim_alir_df.empty:
            df.loc[prim_alir_df.index, 'PRİM TUTARI'] = (
                prim_alir_df['PRİM PERFORMANS PUANI'] *
                prim_alir_df['BAŞARI SKALA'] *
                prim_alir_df['PRİM BAZ TUTAR'] / 100) * (
                (prim_alir_df['GÜN'] - prim_alir_df['RAPOR'].fillna(0)) /
                working_day
            )

#  GUV ile biten DataFrame'lere prim_alir_sube_kodu_df'den PRİM DURUMU değerini getirme işlemi
selected_df_names = [name for name in segment_dfs.keys() if name.endswith( "GUV")]

for df_name in selected_df_names:
    df = segment_dfs[df_name]
    if 'ŞUBE KODU' in df.columns:
        df = df.merge(prim_alir_sube_kodu_df, on='ŞUBE KODU', how='left', suffixes=('', '_prim'))
        if 'PRİM DURUMU_prim' in df.columns:
            df['PRİM DURUMU'] = df['PRİM DURUMU_prim'].combine_first(df['PRİM DURUMU'])
            df.drop(columns=['PRİM DURUMU_prim'], inplace=True)
        segment_dfs[df_name] = df

# PRİM TUTARI hesaplaması için alttaki kodu güncelle
selected_df_names = [name for name in segment_dfs.keys() if name.endswith("GUV")]

for name in selected_df_names:
    df = segment_dfs[name]
    total = len(df)
    perc_80 = int(np.floor(0.80 * total + 0.5))

    df['PRİM TUTARI'] = np.nan
    prim_alir_df = df[df['PRİM DURUMU'] == 'Prim alır']

    if not prim_alir_df.empty:
        prim_alir_df = prim_alir_df.sort_values(by='OKP', ascending=False).reset_index(drop=True)

        # Son ana sınırın genişletilmesi gerekip gerekmediğini kontrol et
        last_prim_index = perc_80
        while last_prim_index < len(prim_alir_df) and prim_alir_df.at[last_prim_index - 1, 'ŞUBE KODU'] == prim_alir_df.at[last_prim_index, 'ŞUBE KODU']:
            last_prim_index += 1

        for i in range(min(last_prim_index, len(prim_alir_df))):
            row = prim_alir_df.iloc[i]
            rapor = row['RAPOR'] if pd.notna(row['RAPOR']) else 0
            prim_tutari = (row['PRİM BAZ TUTAR'] * (row['OKP'] / 100) * ((row['GÜN'] - rapor) / working_day))
            df.loc[df['SİCİL'] == row['SİCİL'], 'PRİM TUTARI'] = prim_tutari

    segment_dfs[name] = df

# GUV' ile biten tüm DataFrame'lerin tek bir DataFrame'de toplanma
guv_df = pd.concat([df for key, df in segment_dfs.items() if key.endswith('GUV')])

oprs_df = pd.concat([df for key, df in segment_dfs.items() if not ( key.endswith('GUV'))])

# Collecting all DataFrames starting with 'KKTC' into a single DataFrame
kktc_df = pd.concat([df for key, df in segment_dfs.items() if key.startswith('KKTC')])

# ŞUBE KODU sütunundaki benzersiz değerleri belirleme
unique_branches = guv_df['ŞUBE KODU'].unique()

# Yeni dataframe oluşturma
guv_prim_df = pd.DataFrame(columns=['ŞUBE KODU', 'PRİM DURUMU'])

# ŞUBE KODU ve PRİM DURUMU sütunlarını doldurma
for branch in unique_branches:
    if not guv_df[(guv_df['ŞUBE KODU'] == branch) & (guv_df['PRİM TUTARI'].notna())].empty:
        prim_status = 'prim alır'
        new_row = pd.DataFrame({'ŞUBE KODU': [branch], 'PRİM DURUMU': [prim_status]})
        guv_prim_df = pd.concat([guv_prim_df, new_row], ignore_index=True)

# ŞUBE KODU sütunundaki benzersiz değerleri belirleme
unique_branches = guv_df['ŞUBE KODU'].unique()

# Yeni guv_prim_df dataframe oluşturma
guv_prim_df = pd.DataFrame(columns=['ŞUBE KODU', 'PRİM DURUMU'])

# ŞUBE KODU ve PRİM DURUMU sütunlarını doldurma
for branch in unique_branches:
    if not guv_df[(guv_df['ŞUBE KODU'] == branch) & (guv_df['PRİM TUTARI'].notna())].empty:
        prim_status = 'prim alır'
        new_row = pd.DataFrame({'ŞUBE KODU': [branch], 'PRİM DURUMU': [prim_status]})
        guv_prim_df = pd.concat([guv_prim_df, new_row], ignore_index=True)

# kur_sof_df ile guv_prim_df dataframe'lerini birleştirme
kur_sof_df = pd.merge(kur_sof_df, guv_prim_df, on='ŞUBE KODU', how='left')

# PRİM DURUMU'nun 'prim alır' olduğu kayıtlar için PRİM TUTARI'yi hesapla
kur_sof_df['PRİM TUTARI'] = kur_sof_df.apply(lambda row: ((row['OKP'] / 100) * row['PRİM BAZ TUTAR']) if row['PRİM DURUMU'] == 'prim alır' else None, axis=1)

serbest_df['PRİM TUTARI']=serbest_df['PRİM BAZ TUTAR']

oprs_df.to_excel("oprs.xlsx")

guv_df.to_excel("guv.xlsx")

serbest_df.to_excel("serbest.xlsx")

kur_sof_df.to_excel("kur_sof.xlsx")